
@model CPCAnnexureI
@{
    var queryId = ViewContext.RouteData.Values["Id"];
    ViewBag.Title = (queryId == null ? "Add New Cash Receiving" : "Edit Cash Receiving");
}

<style>
    #annexureI th {
        text-align: center !important;
    }

    .field-validation-error {
        color: red;
    }
</style>
<form id="lead-frm" class="user-Profile" method="post" enctype="multipart/form-data">
    @Html.AntiForgeryToken()

    @Html.HiddenFor(x => x.Id)

    <div class="row">
        <div class="col-sm-12 text-right">
            <div class="btn-group" role="group">
                <a href="javascript://" onclick="window.history.back()" class="btn btn-default"><i class="fa fa-close"></i> Cancel / Back</a>
                <button type="submit" id="submit" class="btn btn-success hidden"><i class="fa fa-check"></i> Submit</button>
                <button type="button" onclick="checkValidation()" id="btnValidate" class="btn btn-success"><i class="fa fa-check"></i> Submit</button>
            </div>
        </div>
    </div>


    <div class="row">
        <div class="col-sm-12">
            <div class="panel panel-default">
                <div class="panel-body">
                    <h4> Cash Receiving </h4>
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="row">
                                <div class="col-sm-4">
                                    <div class="row form-group">
                                        <label class="col-sm-4 text-left horizontal-label">Sr. Number</label>
                                        <div class="col-sm-8">
                                            @Html.TextBoxFor(x => x.SrNo, new { @class = "form-control input-sm", @type = "number", @required = "required", @autofocus = "true" })
                                            <span class="duplicate text-danger"></span>
                                            @Html.ValidationMessageFor(m => m.SrNo)
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-4">
                                    <div class="row form-group">
                                        <label class="col-sm-3 horizontal-label">Collection Date</label>
                                        <div class="col-sm-9">
                                            <input name="DateOfCollection" id="DateOfCollection" class="form-control input-sm datePicker" type="text" value="@Model.DateOfCollection.ToShortDateString()" required autocomplete="off">
                                            @Html.ValidationMessageFor(m => m.DateOfCollection)
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row tb-padding">
                        <table id="annexureI" class="table table-striped table-bordered table-hover">
                            <thead>
                                <tr>
                                    <th style="width:5% !important">Sr.No</th>
                                    <th>Cash Processing Cell</th>
                                    <th style="width:15% !important">Branch</th>
                                    <th>Denomination</th>
                                    <th style="width:10% !important">No. Of Bundles</th>
                                    <th>Total Amount</th>
                                    <th>Seal No.</th>
                                    <th>Shipment Receipt</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>

                        <div class="col-sm-1">
                            <label>&nbsp; &nbsp;</label> <br />
                            <button class="btn btn-primary btn-sm btn-custom" type="button" id="AddNewRow" title="Add New Row"><i class="fa fa-plus"></i> Add New Row</button>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-sm-12">
                            <div class="row">
                                <div class="col-sm-6">
                                    <div class="row form-group">
                                        <label class="col-sm-6 horizontal-label">Cash Handed Over By <b>CPC</b> Staff First Person</label>
                                        <div class="col-sm-6">
                                            @Html.DropDownListFor(x => x.CashHandedOverCPCStaffAId, (SelectList)ViewBag.EmployeeList, " Select Employee ", new { @class = "form-control input-sm select2" })
                                            @Html.ValidationMessageFor(m => m.CashHandedOverCPCStaffAId)
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="row form-group">
                                        <label class="col-sm-6 horizontal-label">Cash Handed Over By <b>CPC</b> Staff Second Person</label>
                                        <div class="col-sm-6">
                                            @Html.DropDownListFor(x => x.CashHandedOverCPCStaffBId, (SelectList)ViewBag.EmployeeList, " Select Employee ", new { @class = "form-control input-sm select2" })
                                            @Html.ValidationMessageFor(m => m.CashHandedOverCPCStaffBId)
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-6">
                                    <div class="row form-group">
                                        <label class="col-sm-6 horizontal-label">Cash Handed Over By <b>CIT</b> First Person</label>
                                        <div class="col-sm-6">
                                            @Html.DropDownListFor(x => x.CashHandedOverCITStaffAId, (SelectList)ViewBag.EmployeeList, " Select Employee ", new { @class = "form-control input-sm select2" })
                                            @Html.ValidationMessageFor(m => m.CashHandedOverCITStaffAId)
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="row form-group">
                                        <label class="col-sm-6 horizontal-label">Cash Handed Over By <b>CIT</b> Staff Second Person</label>
                                        <div class="col-sm-6">
                                            @Html.DropDownListFor(x => x.CashHandedOverCITStaffBId, (SelectList)ViewBag.EmployeeList, " Select Employee ", new { @class = "form-control input-sm select2" })
                                        </div>
                                    </div>
                                </div>

                            </div>
                            <div class="row">
                                <div class="col-sm-6">
                                    <div class="row form-group">
                                        <label class="col-sm-6 horizontal-label"> <b>CPC</b> Staff Handing Over Cash and Verifying First Person</label>
                                        <div class="col-sm-6">
                                            @Html.DropDownListFor(x => x.SignatureCPCHandingOverCashAId, (SelectList)ViewBag.EmployeeList, " Select Employee ", new { @class = "form-control input-sm select2" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="row form-group">
                                        <label class="col-sm-6 horizontal-label"><b>CPC</b> Staff Handing Over Cash and Verifying Second Person</label>
                                        <div class="col-sm-6">
                                            @Html.DropDownListFor(x => x.SignatureCPCHandingOverCashBId, (SelectList)ViewBag.EmployeeList, " Select Employee ", new { @class = "form-control input-sm select2" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-12 text-right">
            <div class="btn-group" role="group">
                <a href="javascript://" onclick="window.history.back()" class="btn btn-default"><i class="fa fa-close"></i> Cancel / Back</a>
                <button type="submit" id="submit" class="btn btn-success hidden"><i class="fa fa-check"></i> Submit</button>
                <button type="button" onclick="checkValidation()" id="btnValidate" class="btn btn-success"><i class="fa fa-check"></i> Submit</button>
            </div>
        </div>
    </div>

    <select id="listBranches" style="display:none;"></select>
    <select id="listDenomination" style="display:none;"></select>
    <select id="listCPH" style="display:none;">
        <option> - Select - </option>
    </select>
</form>


@section scripts{

    <script type="text/javascript">
        $(document).ready(function () {
            //-- Read Only Mode Trigger -//
            @*if ('@ViewData["IsView"]' != '') {
                $("input").attr("readonly", true);
                $("#IsActive").attr("disabled", true);
                $("#submit").hide();
            }*@
            $("#DateOfCollection").data("DateTimePicker").date(moment('@Model.DateOfCollection.ToShortDateString()'));
            var isSubmit = true;

            //cph ddl change event
            $(document).on('change', '.cpc', function (e) {
                e.preventDefault();
                //console.log($(this));
                //const id = $('#ProjectBranchId option:selected').attr('value');
                var dataa = $(this).select2('data');
                //console.log(dataa[0].id);
                //accountGridRowIndex = $(this).closest('tr').attr("data-id");

                filterBranches(dataa[0].id, $(this).closest('tr').attr("data-id"));
                //console.log(accountGridRowIndex);
                //const totalValue = GetTotalVal($(this).val(), data[0].text);
                //$(this).closest('td').next('td').find('input').val(totalValue);
            });

            //generateBranchDDL(branchArray);
            generateDenomDDL(denomArray);
            generateCPHDDL(cphArray);

            //$("#txtVoucherDate").mask("99-99-9999");
            var accountGridRowIndex;

            //Page Load
            var rowCount = $('#annexureI tbody tr').length;
            if (rowCount == 0) {
                AddFirstRow(1);
                //bindBranchDDL(0);
                bindDenomDDL(0);
                bindCphDDL(0);
                for (var i = 2; i <= 5; i++) {
                    AddNewRow(i);
                    //bindBranchDDL(i - 1);
                    bindDenomDDL(i - 1);
                    bindCphDDL(i - 1);
                }
            }

            //btn-remove Click
            $(document).on('click', '.btn-removeRow', function (e) {
                e.preventDefault();
                if ($('#annexureI tbody tr').length > 1) {
                    $(this).closest('tr').remove();
                }
                else {
                    bootbox.dialog({
                        message: "You Can't Delete this Row",
                        title: "Delete Row",
                        buttons: {
                            main: {
                                label: "Ok",
                                className: "btn-default",
                                callback: function () {
                                    show: false;
                                }
                            },
                        }
                    });
                }
                //GetTotal();
            });

            $('#AddNewRow').click(function () {
                //debugger
                var rownum = $("#annexureI tr:last").attr("data-id");
                rownum = parseInt(rownum) + 1;
                AddNewRow(rownum);
                //bindBranchDDL(rownum - 1);
                bindDenomDDL(rownum - 1);
                bindCphDDL(rownum - 1);
                $(".select2").select2();
            });

            $(".select2").select2();

            //input fields leave event
            $(document).on('focusout', '.inp', function (e) {
                e.preventDefault();
                accountGridRowIndex = $(this).closest('tr').attr("data-id");
                var data = $('#ddlDenomination' + accountGridRowIndex).select2('data');
                const totalValue = GetTotalVal($(this).val(), data[0].text);
                $(this).closest('td').next('td').find('input').val(totalValue);
            });

            //$('#SrNo').on('focusout', function () {
            //    checkSrDuplication($(this).val());
            //});
        });

        function filterBranches(Id, counter) {
            var branchtoAppend = $('#ddlBranch' + (parseInt(counter) - 1));
            var url = '@Url.Action("FetchHirerachy", "AnnexureI")';

            $.getJSON(url,
                { Id: Id },
                function (response) {
                    branchtoAppend.empty();
                    console.log(response);
                    //roads.append(new Option("Choose Road", "0"));
                    $.each(response,
                        function (index, item) {
                            var branch = new Option(item.Text, item.Value);
                            branchtoAppend.append(branch);
                        });
                });
        }
        //Functions
        function generateHtml(row) {
            var _html = '<tr class="rows" data-id="' + row + '">'
            _html += '<td class="text-center" > ' + row + '</td>'
            //_html += '<td><input type="text" class="form-control input-sm" name="CPCAnnexureIDetail[' + (row - 1) + '].CashProcessingCell"></td>'
            _html += '<td><select class="form-control input-sm select2 cpc" id="ddlCph' + (row - 1) + '" name="CPCAnnexureIDetail[' + (row - 1) + '].CashProcessingCellId">   </select></td>'

            _html += '<td><select class="form-control input-sm select2" id="ddlBranch' + (row - 1) + '" name="CPCAnnexureIDetail[' + (row - 1) + '].ProjectBranchId">   </select></td>'
            _html += '<td><select class="form-control input-sm select2" id="ddlDenomination' + (row - 1) + '" name="CPCAnnexureIDetail[' + (row - 1) + '].DenominationId"></select></td>'

            _html += '<td><input type="number" class="form-control input-sm inp" name="CPCAnnexureIDetail[' + (row - 1) + '].NoOfBundles" pattern="[0-9]"></td>'
            _html += '<td><input type="number" class="form-control input-sm" name="CPCAnnexureIDetail[' + (row - 1) + '].TotalAmount" pattern="[0-9]" readonly></td>'
            _html += '<td><input type="number" class="form-control input-sm" name="CPCAnnexureIDetail[' + (row - 1) + '].SealNo" pattern="[0-9]"></td>'
            _html += '<td><input type="number" class="form-control input-sm" name="CPCAnnexureIDetail[' + (row - 1) + '].ShipmentReciptNo" pattern="[0-9]"></td>'

            _html += '<td> <a href="javascript://" class="btn btn-xs btn-danger btn-removeRow" data-original-title="Delete"><i class="fa fa-trash"></i> Delete</a> </td></tr>';

            return _html;
        }

        var branchArray = @Html.Raw(Json.Encode(ViewBag.BrachList));
        var denomArray = @Html.Raw(Json.Encode(ViewBag.DenominationList));
        var cphArray = @Html.Raw(Json.Encode(ViewBag.CPHList));
        //console.log(array);


        //function bindBranchDDL(row) {
        //    //debugger
        //    var options = $("#listBranches > option").clone();
        //    $("#annexureI > tbody > tr #ddlBranch" + row + "").append(options);
        //}
        function bindDenomDDL(row) {
            //debugger
            var options = $("#listDenomination > option").clone();
            $("#annexureI > tbody > tr #ddlDenomination" + row + "").append(options);
        }
        function bindCphDDL(row) {
            //debugger
            var options = $("#listCPH > option").clone();
            $("#annexureI > tbody > tr #ddlCph" + row + "").append(options);
        }

        //function generateBranchDDL(array) {
        //    //debugger
        //    for (var i = 0; i < array.length; i++) {
        //        $("#listBranches").append($("<option /> ").val(array[i].Value).text(array[i].Text));
        //    }
        //}
        function generateDenomDDL(array) {
            //debugger
            for (var i = 0; i < array.length; i++) {
                $("#listDenomination").append($("<option /> ").val(array[i].Value).text(array[i].Text));
            }
        }
        function generateCPHDDL(array) {
            //debugger
            for (var i = 0; i < array.length; i++) {
                $("#listCPH").append($("<option /> ").val(array[i].Value).text(array[i].Text));
            }
        }

        function AddFirstRow(row) {
            if (isEmptyLastRow()) {
                $('#annexureI tbody').append(generateHtml(row));
            }
        }

        function AddNewRow(row) {
            $('#annexureI tr:last').after(generateHtml(row));
        }

        function isEmptyLastRow() {
            var test = $("#annexureI tr:last td:eq(1)").find("input");
            return "" !== $("#annexureI tr:last td:eq(1)").find("input").val() && "" !== $("#annexureI tr:last td:eq(2)").find("input").val();
        }

        function GetTotalVal(unsortedValue, denomVal) {
            const totalVal = 1000 * parseInt(unsortedValue) * parseInt(denomVal);
            return isNaN(totalVal) ? '0' : totalVal;
        }

        function checkValidation() {
            //debugger
            checkSrDuplication($('#SrNo').val())
            if (isSubmit) {
                //$('#lead-frm').submit();
                $('#submit').click();
                //console.log('submitted');
            }

            //if ($('#SrNo').val()) {
            //    //duplication check
            //    checkSrDuplication($('#SrNo').val());
            //}
        }

        function checkSrDuplication(srNumber) {
            //debugger
            if (srNumber) {
                $.get('/CPC/AnnexureI/DuplicationCheck?SrNo=' + srNumber, function (response) {
                    if (response) {
                        //console.log(response);
                        $('.duplicate').html('Sr No. ' + srNumber + ' already exists.');
                        isSubmit = true;
                        $('#SrNo').focus();
                    }
                    else {
                        $('.duplicate').html('');
                        isSubmit = true;
                    }
                });
            }
        }
    </script>
}

